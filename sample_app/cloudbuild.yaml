steps:
# Step 1: Install the package using pip
- name: 'python:3.9'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      #python -m venv /workspace/venv
      #source /workspace/venv/bin/activate
      pip install --no-deps git+https://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:x-oauth-basic@github.com/zeroknowledgediscovery/zcor.git
      
# Step 2. Install requirements
- name: 'python:3.9'
  entrypoint: 'pip'
  args: ['install', '-t', '.', '-r', 'requirements.txt']

      
# Step 3: Build/run the program in main.py.
#- name: 'python:3.9'
#  entrypoint: 'bash'
#  args:
#    - '-c'
#    - |
#      source /workspace/venv/bin/activate
#      python main.py
#  # Add other necessary build steps here
  

# Final step: Deploy the Cloud Function
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'gcloud'
  args:
    - 'functions'
    - 'deploy'
    - 'zcor'
    - '--runtime=python39'
    - '--trigger-http'
    - '--allow-unauthenticated'
    - '--entry-point=zcor'
    - '--region=us-central1'
    - '--service-account=8590480722@cloudbuild.gserviceaccount.com'
    - '--source=.'

# Additional steps can be added as needed, for example to deploy to Cloud Functions

# Here, 'ssh-key' would be the name of the secret where your private SSH key is stored
# And 'latest' refers to the latest version of the secret

# This is where you define options such as the timeout and the images to be created.
#options:
#  timeout: '1600s'

# Define the images to be built if you are using Cloud Build to create Docker images
# images:
# - 'gcr.io/$PROJECT_ID/your-image-name'

# You can also define artifacts to be stored, such as compiled binaries
# artifacts:
#   objects:
#     location: 'gs://your-bucket-name/'
#     paths: ['path/to/your/artifacts/**']
